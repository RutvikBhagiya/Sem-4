----------------------8----------------
Part - A
1. Create a new database named “Darshan”.
use Darshan

2. Create another new database named “DIET”.
use DIET

3. List all databases.
show databases

4. Check the current database.
db

5. Drop “DIET” database.
db.dropDatabase()
use Darshan

6. Create a collection named “Student” in the “Darshan” database.
db.createCollection("Student")

7. Create a collection named “Department” in the “Darshan” database.
db.createCollection("Department")

8. List all collections in the “Darshan” database.
show collections

9. Insert a single document using insertOne into “Department” collection. (Dname:’CE’, HOD:’Patel’)
db.Department.insertOne({Dname:"CE",HOD:"Patel"})

10. Insert two document using insertMany into “Department” collection. (Dname:’IT’ and Dname:’ICT’)
db.Department.insertMany([{Dname:"IT"},{Dname:"ICT"}])

11. Drop a collection named “Department” from the “Darshan” database.
db.dropDatabase("Department")

12. Insert a single document using insertOne into “Student” collection.
(Fields are Name, City, Branch, Semester, Age) Insert your own data.
db.Student.insertOne({Name:"Rutvik",City:"Morbi",Branch:"CSE",Sem:"4",Age:"18"})

13. Insert three documents using insertMany into “Student” collection.
(Fields are Name, City, Branch, Semester, Age) Insert your three friend’s data.
db.Student.insertMany([{Name:"Yash",City:"Morbi",Branch:"CSE",Sem:"4",Age:"18"},{Name:"Smit",City:"Morbi",Branch:"CSE",Sem:"4",Age:"18"},{Name:"Meet",City:"Jam-Kandorna",Branch:"CSE",Sem:"4",Age:"18"}])

14. Check whether “Student” collection exists or not.
db.getCollectionNames().includes("Student")


15. Check the stats of “Student” collection.
db.Student.stats()

16. Drop the “Student” collection.
db.Student.drop()

17. Create a collection named “Deposit”.
db.createCollection("Deposit")

18. Insert following data in to “Deposit” collection.

19. Display all the documents of “Deposit” collection.
db.Deposit.find()

20. Drop the “Deposit” collection.
db.Deposit.drop()


-------------->PART-B<-------------
1. Create a new database named “Computer”.
2. Create a collection named “Faculty” in the “Computer” database.
3. Insert a below document using insertOne into “Faculty” collection. 
4. Insert below documents using insertMany into “Faculty” collection. 
5. Display all the documents of “Faculty” collection.
6. Drop the “Faculty” collection.
7. Drop the “Computer” database


-----------------9------------------
Create and Select Database Named: “BANK_INFO”
1. Retrieve/Display every document of Deposit collection.
db.Deposit.find()

2. Display only one document of Deposit collection. (Use: findOne())
db.Deposit.findOne()

3. Insert following document into Deposit collection. (Use: insertOne())
db.Deposit.insertOne({ACTNO: 109,CNAME:'KIRTI',BNAME:'VIRAR',AMOUNT:3000,ADATE:'1997-05-03'})

4. Insert following documents into Deposit collection. (Use: insertMany())
db.Deposit.insertMany([{ACTNO:110,CNAME:'MITALI',BNAME:'ANDHERI',AMOUNT:4500,ADATE:'1995-09-04'},{ACTNO:111,CNAME:'RAJIV',BNAME:'NEHRU PLACE',AMOUNT:7000,ADATE:'1998-10-02'}])


5. Display all the documents of ‘VIRAR’ branch from Deposit collection.
db.Deposit.find({BNAME:'VIRAR'})


6. Display all the documents of Deposit collection whose amount is between 3000 and 5000.
db.Deposit.find({AMOUNT : {$gte : 3000,$lte : 5000}})


7. Display all the documents of Deposit collection whose amount is greater than 2000 and branch is VIRAR.
db.Deposit.find({AMOUNT:{$gt:2000},BNAME:'VIRAR'})


8. Display all the documents with CNAME, BNAME and AMOUNT fields from Deposit collection.
db.Deposit.find({},{CNAME:1,BNAME:1,AMOUNT:1,_id:0})

9. Display all the documents of Deposit collection on ascending order by CNAME.
db.Deposit.find().sort({CNAME:1})

10. Display all the documents of Deposit collection on descending order by BNAME.
db.Deposit.find().sort({BNAME:-1})

11. Display all the documents of Deposit collection on ascending order by ACTNO and descending order by
AMOUNT.
db.Deposit.find().sort({ACTNO:1,AMOUNT:-1})

12. Display only two documents of Deposit collection.
db.Deposit.find().limit(2)


13. Display 3rd document of Deposit collection.
db.Deposit.find().skip(2).limit(1)

14. Display 6th and 7th documents of Deposit collection.
db.Deposit.find().skip(5).limit(2)

15. Display the count of documents in Deposit collection. 
db.Deposit.countDocuments()